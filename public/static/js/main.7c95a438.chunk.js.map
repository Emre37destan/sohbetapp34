{"version":3,"sources":["store/auth.slice.ts","store/users.slice.ts","store/messages.slice.ts","store/rootReducer.ts","middleware/socketMiddleware.ts","store/index.ts","api/SocketClient.ts","utilities/config.ts","routing/PrivateRoute.tsx","routing/PublicRoute.tsx","assets/doge.png","components/TextField.tsx","views/Login.tsx","utilities/validation.ts","components/Nav.tsx","components/Sidebar.tsx","components/ChatArea.tsx","views/Chat.tsx","App.tsx","index.tsx"],"names":["usersSlice","createSlice","name","initialState","currentUser","isAuthenticated","error","reducers","login","state","payload","logout","actions","users","onlineUsersByUsername","loading","setOnlineUsersByUsername","setUsers","addUser","push","setLoading","setLoadingComplete","messagesSlice","messages","setMessages","addMessage","sendMessage","rootReducer","combineReducers","authState","authReducer","usersState","usersReducer","messagesState","messagesReducer","socket","this","io","disconnect","eventName","data","emit","func","on","store","configureStore","reducer","middleware","params","next","action","dispatch","type","connect","onlineUsers","message","user","getDefaultMiddleware","PrivateRoute","Component","component","rest","useSelector","render","props","to","PublicRoute","TextField","onChange","onBlur","value","label","placeholder","className","htmlFor","Login","useState","email","username","setUser","errors","setErrors","useDispatch","validate","trim","test","validateTextField","handleChange","event","target","handleBlur","src","logo","alt","onSubmit","preventDefault","localStorage","setItem","JSON","stringify","disabled","Nav","onClick","Sidebar","map","i","online","ChatArea","messageInput","handleSubmitForm","handleChangeInput","author","dayjs","date","format","content","Chat","setMessageInput","usersLoading","messagesLoading","useEffect","getState","a","axios","console","log","usersWithOnlineData","useMemo","length","some","onlineUsername","sort","b","localeCompare","reversedMessages","reverse","removeItem","App","hasCheckedIfUserIsLoggedIn","setHasCheckedIfUserIsLoggedIn","loggedInUser","getItem","parse","exact","path","history","createBrowserHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c95a438.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AuthState } from '../utilities/types'\n\nconst initialState: AuthState = {\n  currentUser: null,\n  isAuthenticated: false,\n  error: null,\n}\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    login: (state, { payload }: PayloadAction<any>) => {\n      state.currentUser = payload\n      state.isAuthenticated = true\n    },\n    logout: (state) => {\n      state.currentUser = null\n      state.isAuthenticated = false\n    },\n  },\n})\n\nexport const { login, logout } = usersSlice.actions\nexport default usersSlice.reducer\n","import axios from 'axios'\nimport { createSlice, PayloadAction, Dispatch } from '@reduxjs/toolkit'\nimport { User, UsersState } from '../utilities/types'\n\nconst initialState: UsersState = {\n  users: [],\n  onlineUsersByUsername: [],\n  loading: false,\n  error: null,\n}\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    setOnlineUsersByUsername: (state, { payload }: PayloadAction<string[]>) => {\n      state.onlineUsersByUsername = payload\n    },\n    setUsers: (state, { payload }: PayloadAction<User[]>) => {\n      state.users = payload\n    },\n    addUser: (state, { payload }: PayloadAction<User>) => {\n      state.users.push(payload)\n    },\n    setLoading: (state) => {\n      state.loading = true\n    },\n    setLoadingComplete: (state) => {\n      state.loading = false\n    },\n  },\n})\n\nexport const {\n  setUsers,\n  addUser,\n  setOnlineUsersByUsername,\n  setLoading,\n  setLoadingComplete,\n} = usersSlice.actions\nexport default usersSlice.reducer\n\n// Action\nexport function getUsers() {\n  return async (dispatch: Dispatch, getState: () => {}) => {\n    dispatch(setLoading())\n\n    try {\n      const { data } = await axios('/api/users')\n\n      dispatch(setUsers(data.users))\n    } catch (e) {\n      // Not handling errors\n      console.log(e)\n    } finally {\n      dispatch(setLoadingComplete())\n    }\n  }\n}\n","import axios from 'axios'\nimport { createSlice, PayloadAction, Dispatch } from '@reduxjs/toolkit'\n\nimport { Message, MessagesState } from '../utilities/types'\n\nconst initialState: MessagesState = {\n  messages: [],\n  loading: false,\n  error: null,\n}\n\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    setMessages: (state, { payload }: PayloadAction<Message[]>) => {\n      state.messages = payload\n    },\n    addMessage: (state, { payload }: PayloadAction<Message>) => {\n      state.messages.push(payload)\n    },\n    sendMessage: (state, { payload }: PayloadAction<any>) => {\n      // Placeholder for own message\n    },\n    setLoading: (state) => {\n      state.loading = true\n    },\n    setLoadingComplete: (state) => {\n      state.loading = false\n    },\n  },\n})\n\nexport const {\n  sendMessage,\n  addMessage,\n  setMessages,\n  setLoading,\n  setLoadingComplete,\n} = messagesSlice.actions\nexport default messagesSlice.reducer\n\n// Action\nexport function getMessages() {\n  return async (dispatch: Dispatch, getState: () => {}) => {\n    dispatch(setLoading())\n\n    try {\n      const { data } = await axios('/api/messages')\n\n      dispatch(setMessages(data.messages))\n    } catch (e) {\n      // Not handling errors\n      console.log(e)\n    } finally {\n      dispatch(setLoadingComplete())\n    }\n  }\n}\n","import { combineReducers, Reducer } from 'redux'\n\nimport { RootState } from '../utilities/types'\nimport authReducer from './auth.slice'\nimport usersReducer from './users.slice'\nimport messagesReducer from './messages.slice'\n\nexport const rootReducer: Reducer<RootState> = combineReducers<RootState>({\n  authState: authReducer,\n  usersState: usersReducer,\n  messagesState: messagesReducer,\n})\n","import { Dispatch } from 'redux'\n\nimport { addMessage } from '../store/messages.slice'\nimport { addUser, setOnlineUsersByUsername } from '../store/users.slice'\nimport { Message, User, RootState } from '../utilities/types'\n\ninterface SocketMiddlewareParams {\n  dispatch: Dispatch\n  getState: () => RootState\n}\n\nexport default function socketMiddleware(socket: any) {\n  return (params: SocketMiddlewareParams) => (next: any) => (action: any) => {\n    const { dispatch } = params\n    const { type, payload } = action\n\n    switch (type) {\n      // Connect to the socket when a user logs in\n      case 'users/login': {\n        socket.connect()\n\n        // Set up all the socket event handlers\n        // When these events are received from the socket, they'll dispatch the proper Redux action\n\n        // Update the online users list every time a user logs in or out\n        socket.on('users online', (onlineUsers: string[]) => {\n          dispatch(setOnlineUsersByUsername(onlineUsers))\n        })\n\n        // Append a message every time a new one comes in\n        socket.on('receive message', (message: Message) => {\n          dispatch(addMessage(message))\n        })\n\n        // Append a user every time a new one is registered\n        socket.on('new user added', (user: User) => {\n          dispatch(addUser(user))\n        })\n\n        // Add the current user to the online users list\n        socket.emit('new login', payload)\n\n        break\n      }\n      // Disconnect from the socket when a user logs out\n      case 'users/logout': {\n        socket.disconnect()\n\n        break\n      }\n      // Let the server be the source of truth for all messages; don't dispatch anything\n      case 'messages/sendMessage': {\n        socket.emit('send message', payload)\n\n        return\n      }\n    }\n\n    return next(action)\n  }\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport { rootReducer } from './rootReducer'\nimport socketMiddleware from '../middleware/socketMiddleware'\nimport SocketClient from '../api/SocketClient'\n\nconst socket = new SocketClient()\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [socketMiddleware(socket), ...getDefaultMiddleware()],\n})\n","import { io, Socket } from 'socket.io-client'\n\nimport { WEB_SOCKET_HOST } from '../utilities/config'\n\n// A little API for the stateful socket connection, just to keep it out of the global\n// namespace and away from the socket middleware\nexport default class SocketClient {\n  socket: Socket | null\n\n  connect() {\n    this.socket = io(WEB_SOCKET_HOST)\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n  }\n\n  emit(eventName: string, data: any) {\n    if (this.socket) {\n      this.socket.emit(eventName, data)\n    }\n  }\n\n  on(eventName: string, func: () => void) {\n    if (this.socket) {\n      this.socket.on(eventName, func)\n    }\n  }\n}\n","export const WEB_SOCKET_HOST = 'http://localhost:5000'\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\n\nimport { RootState } from '../utilities/types'\n\ninterface Props extends RouteProps {\n  component: any\n}\n\nexport const PrivateRoute: React.FC<Props> = ({ component: Component, ...rest }) => {\n  const { isAuthenticated } = useSelector((state: RootState) => state.authState)\n\n  return (\n    <Route\n      render={(props) => (isAuthenticated ? <Component {...props} /> : <Redirect to=\"/\" />)}\n      {...rest}\n    />\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Redirect, Route, RouteProps } from 'react-router-dom'\n\nimport { RootState } from '../utilities/types'\n\ninterface Props extends RouteProps {\n  component: any\n}\n\nexport const PublicRoute: React.FC<Props> = ({ component: Component, ...rest }) => {\n  const { isAuthenticated } = useSelector((state: RootState) => state.authState)\n\n  return (\n    <Route\n      render={(props) => (!isAuthenticated ? <Component {...props} /> : <Redirect to=\"/chat\" />)}\n      {...rest}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/doge.28763983.png\";","import React from 'react'\n\nexport interface Props {\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void\n  error?: string\n  value: string\n  label: string\n  placeholder: string\n  name: string\n}\n\nexport const TextField: React.FC<Props> = ({\n  onChange,\n  onBlur,\n  error,\n  value,\n  label,\n  placeholder,\n  name,\n}) => {\n  return (\n    <div className=\"mb-6\">\n      <label htmlFor={name} className=\"block mb-2 text-left text-gray-500 font-semibold\">\n        {label}\n      </label>\n      <input\n        type=\"text\"\n        name={name}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        onBlur={onBlur}\n        className={\n          'w-full p-3 placeholder-gray-300 border border-gray-200 rounded-md shadow-md focus:outline-none focus:ring  focus:ring-opacity-50' +\n          (!!error ? ' border-red-300 ring-red-300' : '')\n        }\n      />\n      {!!error && <div className=\"my-2 text-left text-red-400 text-sm\">{error}</div>}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport logo from '../assets/doge.png'\nimport { validateEmail, validateTextField } from '../utilities/validation'\nimport { TextField } from '../components/TextField'\nimport { login } from '../store/auth.slice'\n\nexport interface FormFields {\n  email: string\n  username: string\n}\n\nexport interface FormErrors {\n  email?: string\n  username?: string\n}\n\nexport const Login: React.FC = () => {\n  const [user, setUser] = useState<FormFields>({ email: '', username: '' })\n  const [errors, setErrors] = useState<FormErrors>({})\n  const dispatch = useDispatch()\n\n  const validate = (name: string, value: string) => {\n    switch (name) {\n      case 'email':\n        setErrors({ ...errors, [name]: validateEmail(value) })\n        break\n      case 'username':\n        setErrors({ ...errors, [name]: validateTextField(value) })\n        break\n    }\n  }\n\n  const isLoginButtonDisabled = () => {\n    // Both login fields need to be filled out and free of errors before user can submit\n    if (!user.email || !user.username) {\n      return true\n    }\n    if (!!errors.email || !!errors.username) {\n      return true\n    }\n\n    return false\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target\n\n    setUser({\n      ...user,\n      [name]: value,\n    })\n\n    if (errors[name as keyof FormErrors]) {\n      validate(name, value)\n    }\n  }\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { name, value } = event.target\n\n    validate(name, value)\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n\n    dispatch(login(user))\n\n    // Instead of logging in user via actual persistent session, save in localStorage\n    localStorage.setItem('user', JSON.stringify(user))\n  }\n\n  return (\n    <div className=\"flex justify-center items-center h-screen bg-gray-100\">\n      <div className=\"container bg-white m-4 p-12 w-500 text-center rounded-md shadow-lg max-w-full mx-auto\">\n        <img src={logo} className=\"block mx-auto mb-3 text-center w-24\" alt=\"Doge\" />\n\n        <h1 className=\"text-3xl mb-8 font-bold text-gray-700\">Sohbete Giriş Yap!</h1>\n\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"E-Posta - EMail Adresiniz!\"\n            name=\"email\"\n            value={user.email}\n            placeholder=\"kral@example.com\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={errors.email}\n          />\n          <TextField\n            label=\"Kullanıcı Adınız!\"\n            name=\"username\"\n            value={user.username}\n            placeholder=\"ali veli\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            error={errors.username}\n          />\n          <div className=\"mb-3\">\n            <button\n              className=\"w-full px-3 py-4 text-white bg-blue font-medium rounded-md shadow-md hover:bg-blue-dark disabled:opacity-50 focus:outline-none\"\n              disabled={isLoginButtonDisabled()}\n            >\n              Giriş Yap!\n            </button>\n          </div>\n          <p className=\"text-left text-gray-400 text-sm\">Bu Sistem Yalnızca Yeni Hesap Oluşturma Ile Kullanılır!</p>\n        </form>\n      </div>\n    </div>\n  )\n}\n","export const validateEmail = (email: string) => {\n  if (email.trim() === '') {\n    return 'E-Posta - EMail Adresiniz Gereklidir!'\n  }\n\n  if (!/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)) {\n    return 'E-Posta - EMail Adresiniz Geçersizdir!'\n  }\n}\n\nexport const validateTextField = (value: string) => {\n  if (value.trim() === '') {\n    return 'Kullanıcı Adınız Gereklidir!'\n  }\n\n  if (/[^A-Za-z0-9_-]/.test(value)) {\n    return 'Kullanıcı Adınız Yalnızca (Harf, Sayı, Tire & Alt Çizgi) Içermelidir!'\n  }\n}\n","import React from 'react'\nimport logo from '../assets/doge.png'\n\nexport interface Props {\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nexport const Nav: React.FC<Props> = ({ onClick }) => {\n  return (\n    <div className=\"bg-white fixed w-full top-0 left-0 z-10 flex items-center justify-between shadow-sm py-3 px-6 nav\">\n      <div className=\"flex items-center\">\n        <img src={logo} alt=\"Chat App\" className=\"h-12 w-12\" />\n        <h1 className=\"ml-3 text-3xl font-semibold\">Sohbet App</h1>\n      </div>\n      <button\n        type=\"button\"\n        className=\"px-6 py-3 text-white bg-blue font-medium rounded-md shadow-md hover:bg-blue-dark disabled:opacity-50 focus:outline-none\"\n        onClick={onClick}\n      >\n        Çıkış Yap\n      </button>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { User } from '../utilities/types'\n\nexport interface Props {\n  currentUser: User | null\n  users: User[]\n}\n\nexport const Sidebar: React.FC<Props> = ({ users, currentUser }) => {\n  return (\n    <div className=\"flex-none min-w-300 bg-blue overflow-y-auto\">\n      <div>\n        <h2 className=\"m-6 text-white font-bold text-lg\">Kullanıcılar</h2>\n        {users.map((user, i: number) => (\n          <div\n            key={`${user.username}-${i}`}\n            className=\"p-3 mx-6 my-2 text-white text-opacity-70 bg-blue-dark rounded-md\"\n          >\n            <div className=\"flex items-center\">\n              <div\n                className={`h-2 w-2 mr-2 rounded-full inline-block ${\n                  user.online ? 'bg-green-400' : 'bg-blue-light'\n                }`}\n              ></div>\n              <span>{user.username}</span>\n              {user.username === currentUser!.username && (\n                <span className=\"ml-1 text-white text-opacity-30\">(sen)</span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport dayjs from 'dayjs'\n\nimport { Message } from '../utilities/types'\n\nexport interface Props {\n  messages: Message[]\n  messageInput: string\n  handleSubmitForm: (event: React.FormEvent<HTMLFormElement>) => void\n  handleChangeInput: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const ChatArea: React.FC<Props> = ({\n  messages,\n  messageInput,\n  handleSubmitForm,\n  handleChangeInput,\n}) => {\n  return (\n    <div className=\"flex-1 w-full bg-gray-100\">\n      <div className=\"flex flex-col chatarea\">\n        <div className=\"flex-1 overflow-y-auto p-6 flex flex-col-reverse\">\n          {messages.map((message, i) => (\n            <div key={`${message.author}-${message.date}-${i}`} className=\"mb-3 p-3\">\n              <div className=\"flex items-center mb-2\">\n                <span className=\"font-bold text-gray-700 text-lg mr-4\">{message.author}</span>{' '}\n                <span className=\"text-sm text-gray-400\">\n                  {dayjs(message.date).format('h:mm A')}\n                </span>\n              </div>\n              <p className=\"text-gray-800\">{message.content}</p>\n            </div>\n          ))}\n        </div>\n        <div className=\"flex-none pb-4 px-4\">\n          <form onSubmit={handleSubmitForm}>\n            <input\n              type=\"text\"\n              name=\"messageInput\"\n              value={messageInput}\n              onChange={handleChangeInput}\n              className=\"w-full p-3 placeholder-gray-300 border border-gray-200 rounded-md shadow-md focus:outline-none focus:border-blue-light\"\n              placeholder=\"Ceval Yollanıyor...\"\n            />\n            <button className=\"hidden\">Gönder</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useMemo, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport dayjs from 'dayjs'\n\nimport { Nav } from '../components/Nav'\nimport { Sidebar } from '../components/Sidebar'\nimport { ChatArea } from '../components/ChatArea'\nimport { sendMessage, getMessages } from '../store/messages.slice'\nimport { logout } from '../store/auth.slice'\nimport { getUsers } from '../store/users.slice'\nimport { RootState, Message } from '../utilities/types'\n\nexport const Chat: React.FC = () => {\n  const dispatch = useDispatch()\n  const [messageInput, setMessageInput] = useState('')\n\n  const { currentUser } = useSelector((state: RootState) => state.authState)\n  const { users, loading: usersLoading, onlineUsersByUsername } = useSelector(\n    (state: RootState) => state.usersState\n  )\n  const { messages, loading: messagesLoading } = useSelector(\n    (state: RootState) => state.messagesState\n  )\n\n  const handleLogoutClick = (event: any) => {\n    // Log out session\n    localStorage.removeItem('user')\n\n    dispatch(logout())\n  }\n\n  const handleSubmitForm = (event: any) => {\n    event.preventDefault()\n\n    if (messageInput && messageInput.trim() !== '') {\n      const message: Message = {\n        content: messageInput.trim(),\n        date: dayjs().format(),\n        author: currentUser!.username,\n      }\n\n      dispatch(sendMessage(message))\n    }\n\n    setMessageInput('')\n  }\n\n  const handleChangeInput = (event: any) => {\n    setMessageInput(event.target.value)\n  }\n\n  useEffect(() => {\n    dispatch(getUsers())\n    dispatch(getMessages())\n  }, [dispatch])\n\n  // Add green dot for online users\n  const usersWithOnlineData = useMemo(() => {\n    if (users.length < 1) {\n      return []\n    }\n\n    return users\n      .map((user) => ({\n        ...user,\n        online: onlineUsersByUsername.some((onlineUsername) => onlineUsername === user.username),\n      }))\n      .sort((a, b) => a.username.localeCompare(b.username))\n  }, [users, onlineUsersByUsername])\n\n  // Add green dot for online users\n  const reversedMessages = useMemo(() => {\n    if (messages.length < 1) {\n      return []\n    }\n\n    return [...messages].reverse()\n  }, [messages])\n\n  if (messagesLoading || usersLoading) {\n    return <div className=\"flex justify-center items-center h-screen bg-gray-100\">Yükleniyor...</div>\n  }\n\n  return (\n    <>\n      <Nav onClick={handleLogoutClick} />\n      <div className=\"flex m-0 content\">\n        <Sidebar users={usersWithOnlineData} currentUser={currentUser} />\n        <ChatArea\n          messages={reversedMessages}\n          messageInput={messageInput}\n          handleSubmitForm={handleSubmitForm}\n          handleChangeInput={handleChangeInput}\n        />\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Switch, Redirect } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\n\nimport { PrivateRoute } from './routing/PrivateRoute'\nimport { PublicRoute } from './routing/PublicRoute'\nimport { Login } from './views/Login'\nimport { Chat } from './views/Chat'\nimport { login } from './store/auth.slice'\n\nexport const App = () => {\n  const dispatch = useDispatch()\n  const [hasCheckedIfUserIsLoggedIn, setHasCheckedIfUserIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    // In lieu of having any actual authentication via database or SSO, use localStorage\n    // to retain client side logged in state\n    const loggedInUser = localStorage.getItem('user')\n\n    if (loggedInUser) {\n      dispatch(login(JSON.parse(loggedInUser)))\n    }\n\n    setHasCheckedIfUserIsLoggedIn(true)\n  }, [dispatch, setHasCheckedIfUserIsLoggedIn])\n\n  if (!hasCheckedIfUserIsLoggedIn) {\n    // This happens really fast so it looks bad\n    return <div className=\"flex justify-center items-center h-screen bg-gray-100\">Loading...</div>\n  }\n\n  return (\n    <Switch>\n      <PublicRoute component={Login} exact path=\"/\" />\n      <PrivateRoute component={Chat} exact path=\"/chat\" />\n      <Redirect to=\"/\" />\n    </Switch>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { createBrowserHistory } from 'history'\n\nimport './index.css'\n\nimport { store } from './store'\nimport { App } from './App'\n\nconst history = createBrowserHistory()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router history={history}>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}